"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = __importStar(require("typescript"));
var globby = require("globby");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var _a = fs_1.default.promises, stat = _a.stat, writeFile = _a.writeFile, readFile = _a.readFile, realpath = _a.realpath;
function simpleStat(path) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, stat(path)];
                case 1: return [2 /*return*/, _b.sent()];
                case 2:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function simpleRead(path) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, readFile(path)];
                case 1: return [2 /*return*/, (_b.sent()).toString()];
                case 2:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function intersectSets(a, b) {
    return new Set(Array.from(a).filter(function (x) { return b.has(x); }));
}
function isAutogenerated(configPath) {
    try {
        return !!require(configPath).autogenerated;
    }
    catch (_a) { }
    return false;
}
function generateConfigsInPlace(targetDir) {
    return __awaiter(this, void 0, void 0, function () {
        function dependsOn(packageName, target, visitedList) {
            if (visitedList === void 0) { visitedList = new Set(); }
            var deps = nameToDependencies[packageName];
            for (var _i = 0, _a = Array.from(deps); _i < _a.length; _i++) {
                var dep = _a[_i];
                if (dep === target) {
                    return true;
                }
                if (visitedList.has(dep)) {
                    continue;
                }
                if (!packageNames.has(dep))
                    return;
                visitedList.add(dep);
                if (dependsOn(dep, target, visitedList)) {
                    return true;
                }
            }
        }
        var packageFiles, nameToLocationMapping, nameToDependencies, packageContainsCircularMapping, _i, packageFiles_1, packagePath, contents, packageRoot, name, deps, _a, _b, depsKey, depsKeys, _c, depsKeys_1, dep, possibleBaseConfigPath, baseConfig, packageNames, _loop_1, _d, _e, _f, packageName, rootBuildConfigPath, rootConfig;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0: return [4 /*yield*/, globby([path_1.default.join(targetDir, "**/package.json"), "!**/node_modules/**", "!" + path_1.default.join(targetDir, "package.json")])];
                case 1:
                    packageFiles = _g.sent();
                    console.log("Discovered " + packageFiles.length + " packages.");
                    if (packageFiles.length === 0) {
                        return [2 /*return*/];
                    }
                    console.log("Enumerating immediate dependencies of each...");
                    nameToLocationMapping = {};
                    nameToDependencies = {};
                    packageContainsCircularMapping = {};
                    _i = 0, packageFiles_1 = packageFiles;
                    _g.label = 2;
                case 2:
                    if (!(_i < packageFiles_1.length)) return [3 /*break*/, 7];
                    packagePath = packageFiles_1[_i];
                    return [4 /*yield*/, realpath(packagePath)];
                case 3:
                    packagePath = _g.sent();
                    contents = require(packagePath);
                    packageRoot = path_1.default.dirname(packagePath);
                    name = path_1.default.normalize(contents.name);
                    nameToLocationMapping[name] = packageRoot;
                    deps = new Set();
                    for (_a = 0, _b = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies", "bundleDependencies"]; _a < _b.length; _a++) {
                        depsKey = _b[_a];
                        if (contents[depsKey]) {
                            depsKeys = Object.keys(contents[depsKey]);
                            for (_c = 0, depsKeys_1 = depsKeys; _c < depsKeys_1.length; _c++) {
                                dep = depsKeys_1[_c];
                                deps.add(path_1.default.normalize(dep));
                            }
                        }
                    }
                    if (!!deps.size) return [3 /*break*/, 5];
                    console.log("Package " + name + " lists no explicit dependencies - scanning component typescript files for references...");
                    return [4 /*yield*/, fillDepsFromFileContents(deps, packageRoot)];
                case 4:
                    _g.sent();
                    _g.label = 5;
                case 5:
                    nameToDependencies[name] = deps;
                    _g.label = 6;
                case 6:
                    _i++;
                    return [3 /*break*/, 2];
                case 7:
                    possibleBaseConfigPath = path_1.default.join(targetDir, "tsconfig.json");
                    return [4 /*yield*/, simpleStat(possibleBaseConfigPath)];
                case 8:
                    baseConfig = _g.sent();
                    packageNames = new Set(Object.keys(nameToLocationMapping));
                    _loop_1 = function (packageName) {
                        var packageRoot, tsconfigPath, deps, referencableDeps, candidateConfig;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    packageRoot = nameToLocationMapping[packageName];
                                    tsconfigPath = path_1.default.join(packageRoot, "tsconfig.json");
                                    return [4 /*yield*/, simpleStat(tsconfigPath)];
                                case 1:
                                    if ((_a.sent()) && !isAutogenerated(tsconfigPath)) {
                                        console.log(packageName + " has tsconfig, skipping...");
                                        return [2 /*return*/, "continue"];
                                        // TODO: Consider adding references to existing non-autogenerated `tsconfig`s?
                                    }
                                    console.log("Generating tsconfig for " + packageName + "...");
                                    deps = nameToDependencies[packageName];
                                    referencableDeps = intersectSets(deps, packageNames);
                                    candidateConfig = {
                                        autogenerated: true,
                                        base: baseConfig ? path_1.default.relative(path_1.default.dirname(tsconfigPath), possibleBaseConfigPath).replace(/\\/g, "/") : undefined,
                                        references: referencableDeps.size ? Array.from(referencableDeps).sort().map(function (d) {
                                            return (d === packageName ? undefined : { path: path_1.default.relative(path_1.default.dirname(tsconfigPath), nameToLocationMapping[d]).replace(/\\/g, "/"), circular: packageContainsCircularMapping[d] = packageContainsCircularMapping[d] || dependsOn(d, packageName) });
                                        }).filter(function (x) { return !!x; }) : undefined,
                                        compilerOptions: {
                                            declaration: true,
                                            composite: referencableDeps.size ? true : undefined
                                        }
                                    };
                                    return [4 /*yield*/, writeFile(tsconfigPath, JSON.stringify(candidateConfig, null, 4))];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _d = [];
                    for (_e in nameToLocationMapping)
                        _d.push(_e);
                    _f = 0;
                    _g.label = 9;
                case 9:
                    if (!(_f < _d.length)) return [3 /*break*/, 12];
                    packageName = _d[_f];
                    return [5 /*yield**/, _loop_1(packageName)];
                case 10:
                    _g.sent();
                    _g.label = 11;
                case 11:
                    _f++;
                    return [3 /*break*/, 9];
                case 12:
                    console.log("Done!");
                    rootBuildConfigPath = path_1.default.join(targetDir, "tsconfig.build.json");
                    rootConfig = {
                        autogenerated: true,
                        base: baseConfig ? path_1.default.relative(path_1.default.dirname(rootBuildConfigPath), possibleBaseConfigPath).replace(/\\/g, "/") : undefined,
                        references: packageNames.size ? Array.from(packageNames).sort().map(function (d) {
                            return ({ path: path_1.default.relative(path_1.default.dirname(rootBuildConfigPath), nameToLocationMapping[d]).replace(/\\/g, "/"), circular: packageContainsCircularMapping[d] });
                        }) : undefined,
                        compilerOptions: {
                            declaration: true,
                            composite: packageNames.size ? true : undefined
                        }
                    };
                    return [4 /*yield*/, writeFile(rootBuildConfigPath, JSON.stringify(rootConfig, null, 4))];
                case 13:
                    _g.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.generateConfigsInPlace = generateConfigsInPlace;
function fillDepsFromFileContents(deps, packageRoot) {
    return __awaiter(this, void 0, void 0, function () {
        var glob, tsFiles;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    glob = path_1.default.join(packageRoot, "**/*.ts");
                    return [4 /*yield*/, globby([glob, glob + "x", "!**/node_modules/**"])];
                case 1:
                    tsFiles = _a.sent();
                    return [4 /*yield*/, Promise.all(tsFiles.map(function (filePath) { return __awaiter(_this, void 0, void 0, function () {
                            var contents, info, _i, _a, refKind, _b, _c, file, specifier, parts;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0: return [4 /*yield*/, simpleRead(filePath)];
                                    case 1:
                                        contents = _d.sent();
                                        if (!contents)
                                            return [2 /*return*/];
                                        info = ts.preProcessFile(contents);
                                        for (_i = 0, _a = ["typeReferenceDirectives", "importedFiles"]; _i < _a.length; _i++) {
                                            refKind = _a[_i];
                                            for (_b = 0, _c = info[refKind]; _b < _c.length; _b++) {
                                                file = _c[_b];
                                                specifier = path_1.default.normalize(file.fileName);
                                                if (!specifier)
                                                    continue;
                                                parts = specifier.split(path_1.default.sep);
                                                if (specifier.startsWith("@")) {
                                                    deps.add(parts.slice(0, 2).join(path_1.default.sep));
                                                }
                                                if (!specifier.startsWith(".")) {
                                                    deps.add(parts[0]);
                                                }
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
